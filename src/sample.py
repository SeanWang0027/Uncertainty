"""Sample the sequences generated by the model."""
import argparse
import pickle
import json
from models import LanguageModel


class Sampler(object):
    """Sampler to sample answer from the model."""
    def __init__(self, model_name: str, dataset: str) -> None:
        """Initialize the sampler model and the dataset used for sampling response.

        Args:
            model_name (str): The name of the model.
            dataset (str): The name of the dataset.
        """
        self.model = LanguageModel(model_name)
        self.dataset = dataset
        self.load_data()

    def load_data(self) -> None:
        """Load the data based on the name of the dataset."""
        if self.dataset == 'mmlu':
            data_file = '../data/mmlu_10k.json'
            self.data = json.load(open(data_file, "r"))

    def format_prompt(self, example: dict) -> dict:
        """Format the prompt for sampling.

        Args:
            example (dict): The data point object.

        Returns:
            A dict which contain necessary example for sampling.
        """
        exp = dict()
        exp["id"] = example["id"]
        exp['answer'] = example['answer']
        prompt = ""
        if self.dataset == 'mmlu':
            prompt += "Question: " + example["question"] + "\nChoices:\n"
        for k, v in example["choices"].items():
            prompt += k + ". " + str(v) + "\n"
        prompt += "Answer:"
        exp["prompt"] = prompt
        return exp

    def sample(self, start: int, end: int, num_responses: int, stored_path='../output/') -> None:
        """Sample the result for questions in the datasets, from the start index to end index, and stored in .pkl file.

        Args:
            start (int): The start index of the sampling.
            end (int): The end index of the sampling.
            num_responses (int): Time for sampling for a single point.
            stored_path (str): The path for .pkl saved path.
        """
        stored_path = f'{stored_path}{self.dataset}_{start}_{end}.pkl'
        for i in range(start, end + 1):
            for datam in self.data:
                if datam['id'] == i:
                    exp = self.format_prompt(datam)
                    break
            print(exp)
            responses = self.model.generate_response(exp['prompt'], num_responses)
            with open(stored_path, 'ab') as f:
                pickle.dump({"id": exp['id'], 'prompt': exp['prompt'], 'responses': responses, 'answer': exp['answer']}, f)


def main() -> None:
    """The main function for sampling."""
    parser = argparse.ArgumentParser(description='Prefix Finetuning for GPT2 models.')
    parser.add_argument('--model_name', type=str, required=True, help='Initial model name to do the prefix finetuning.')
    parser.add_argument('--dataset', type=str, default='mmlu', help='The output json path for the result.')
    parser.add_argument('--start', type=int, required=True, help='The start index of the sampling.')
    parser.add_argument('--end', type=int, required=True, help='The end index of the sampling.')
    parser.add_argument('--num_responses', type=int, required=True, help='The sampling times.')
    args = parser.parse_args()
    model_name = args.model_name
    dataset = args.dataset
    sampler = Sampler(model_name=model_name, dataset=dataset)
    sampler.sample(start=args.start, end=args.end, num_responses=args.num_responses)


if __name__ == '__main__':
    main()
